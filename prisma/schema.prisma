// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output   = "./src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String       @id @unique @default(cuid())
  username          String       @unique @db.VarChar(255)
  email             String       @unique @db.VarChar(255)
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  memberships       Membership[]
  organizedFeasts   Feast[]       @relation("Organizer")
  votes             Vote[]
}

model Herd {
  id        String       @id @unique @default(cuid())
  name      String       @unique
  createdAt DateTime
  updatedAt DateTime
  members   Membership[]
  feasts    Feast[]
}

model Membership {
  userId    String
  herdId    String
  role      MembershipRole @default(USER)
  createdAt DateTime       @default(now())
  updatedAt DateTime?      @updatedAt
  herd      Herd           @relation(fields: [herdId], references: [id])
  user      User           @relation(fields: [userId], references: [id])

  @@id([userId, herdId])
}

model Feast {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt
  name        String
  organizer   User         @relation("Organizer", fields: [organizerId], references: [id])
  organizerId String
  herd        Herd         @relation(fields: [herdId], references: [id])
  herdId      String
  startDate   String
  endDate     String
  lat         Float
  long        Float
  distance    Int
  restaurants Restaurant?
  closed      Boolean      @default(false)
}

model Vote {
  id            String     @id @unique @default(uuid())
  userId        String
  restaurantId  Int
  feastId       String
  type          VoteType   @default(YASS)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime?  @updatedAt

  user          User       @relation(fields: [userId], references: [id])
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id])
}

model HerdInvitation {
  id        String   @id @unique @default(cuid())
  uid       String
  email     String
  herdId    String
  herdName  String
  role      String
  createdAt DateTime @default(now())
}

model Restaurant {
  id        Int    @id @default(autoincrement())
  data      Json
  feastId   String     @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  votes     Vote[]

  feast     Feast     @relation(fields: [feastId], references: [id])
}

enum MembershipRole {
  ADMIN
  USER
}

enum VoteType {
  YASS
  NAY
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}