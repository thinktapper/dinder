// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output   = "./src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(uuid())
  name          String?
  username      String?
  email         String       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  listedHerds   Herd[]        @relation("ListedHerds")
  joinedFeasts  Feast[]       @relation("JoinedFeasts")
  sentVotes     Vote[]
  friendsList   String[]
}

model Herd {
  id        String  @id @default(uuid())
  name      String
  leader    String
  members   User[]
  feasts    Feast[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feast {
  id          String        @id @default(uuid())
  name        String
  endDate     String
  voteDate    String
  lat         Float
  long        Float
  distance    Int
  leader      User          @relation("ListedHerds", fields: [leaderId], references: [id])
  leaderId    String
  createdAt   DateTime      @default(now())
  votes       Vote[]
  joinedBy    User[]        @relation("JoinedFeasts")
}

model Vote {
  id           String   @id @default(uuid())
  feastId      String
  restauantId  String
  userId       String
  positiveVote Int
  negativeVote Int
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  feast Feast @relation(fields: [feastId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}